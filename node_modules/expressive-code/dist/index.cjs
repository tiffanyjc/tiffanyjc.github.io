"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ExpressiveCode: () => ExpressiveCode
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@expressive-code/core");
var import_plugin_frames = require("@expressive-code/plugin-frames");
var import_plugin_shiki = require("@expressive-code/plugin-shiki");
var import_plugin_text_markers = require("@expressive-code/plugin-text-markers");
__reExport(src_exports, require("@expressive-code/core"), module.exports);
__reExport(src_exports, require("@expressive-code/plugin-frames"), module.exports);
__reExport(src_exports, require("@expressive-code/plugin-shiki"), module.exports);
__reExport(src_exports, require("@expressive-code/plugin-text-markers"), module.exports);
var ExpressiveCode = class extends import_core.ExpressiveCodeEngine {
  constructor({ shiki, textMarkers, frames, ...baseConfig } = {}) {
    const pluginsToPrepend = [];
    const baseConfigPlugins = baseConfig.plugins?.flat() || [];
    const notPresentInPlugins = (name) => baseConfigPlugins.every((plugin) => plugin.name !== name);
    if (shiki !== false && notPresentInPlugins("Shiki")) {
      pluginsToPrepend.push((0, import_plugin_shiki.pluginShiki)(shiki !== true ? shiki : void 0));
    }
    if (textMarkers !== false && notPresentInPlugins("TextMarkers")) {
      if (typeof textMarkers === "object" && textMarkers.styleOverrides) {
        throw new Error(
          `The Expressive Code config option "textMarkers" can no longer be an object,
					but only undefined or a boolean. Please move any style settings into the
					top-level "styleOverrides" object below the new "textMarkers" key.`.replace(/\s+/g, " ")
        );
      }
      pluginsToPrepend.push((0, import_plugin_text_markers.pluginTextMarkers)());
    }
    if (frames !== false && notPresentInPlugins("Frames")) {
      if (typeof frames === "object" && frames.styleOverrides) {
        throw new Error(
          `The config option "frames" no longer has its own "styleOverrides" object.
					Please move any style settings into the top-level "styleOverrides" object
					below the new "frames" key.`.replace(/\s+/g, " ")
        );
      }
      pluginsToPrepend.push((0, import_plugin_frames.pluginFrames)(frames !== true ? frames : void 0));
    }
    const pluginsWithDefaults = [...pluginsToPrepend, ...baseConfig.plugins || []];
    super({ ...baseConfig, plugins: pluginsWithDefaults });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ExpressiveCode,
  ...require("@expressive-code/core"),
  ...require("@expressive-code/plugin-frames"),
  ...require("@expressive-code/plugin-shiki"),
  ...require("@expressive-code/plugin-text-markers")
});
//# sourceMappingURL=index.cjs.map